SET DATABASE UNIQUE NAME HSQLDB7A5933073F
SET DATABASE GC 0
SET DATABASE DEFAULT RESULT MEMORY ROWS 0
SET DATABASE EVENT LOG LEVEL 0
SET DATABASE TRANSACTION CONTROL LOCKS
SET DATABASE DEFAULT ISOLATION LEVEL READ COMMITTED
SET DATABASE TRANSACTION ROLLBACK ON CONFLICT TRUE
SET DATABASE TEXT TABLE DEFAULTS ''
SET DATABASE SQL NAMES FALSE
SET DATABASE SQL REFERENCES FALSE
SET DATABASE SQL SIZE TRUE
SET DATABASE SQL TYPES FALSE
SET DATABASE SQL TDC DELETE TRUE
SET DATABASE SQL TDC UPDATE TRUE
SET DATABASE SQL CONCAT NULLS TRUE
SET DATABASE SQL UNIQUE NULLS TRUE
SET DATABASE SQL CONVERT TRUNCATE TRUE
SET DATABASE SQL AVG SCALE 0
SET DATABASE SQL DOUBLE NAN TRUE
SET FILES WRITE DELAY 500 MILLIS
SET FILES BACKUP INCREMENT TRUE
SET FILES CACHE SIZE 10000
SET FILES CACHE ROWS 50000
SET FILES SCALE 32
SET FILES LOB SCALE 32
SET FILES DEFRAG 0
SET FILES NIO TRUE
SET FILES NIO SIZE 256
SET FILES LOG TRUE
SET FILES LOG SIZE 50
SET FILES CHECK 895
SET DATABASE COLLATION "SQL_TEXT" PAD SPACE
CREATE USER SA PASSWORD DIGEST 'd41d8cd98f00b204e9800998ecf8427e'
ALTER USER SA SET LOCAL TRUE
CREATE SCHEMA PUBLIC AUTHORIZATION DBA
CREATE SCHEMA ROLODEX AUTHORIZATION SA
CREATE SCHEMA SALES_SCHEMA AUTHORIZATION SA
CREATE SCHEMA SALES_DIMENSIONAL_SCHEMA AUTHORIZATION SA
CREATE MEMORY TABLE ROLODEX.PERSON(PERSONID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL,PERSONNAME VARCHAR(16777216),CONSTRAINT PERSON_PRIMARYKEY PRIMARY KEY(PERSONID))
ALTER TABLE ROLODEX.PERSON ALTER COLUMN PERSONID RESTART WITH 0
CREATE MEMORY TABLE ROLODEX.ADDRESS(ADDRESSID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL,ADDRESSDETAIL VARCHAR(16777216),CONSTRAINT ADDRESS_PRIMARYKEY PRIMARY KEY(ADDRESSID))
ALTER TABLE ROLODEX.ADDRESS ALTER COLUMN ADDRESSID RESTART WITH 0
CREATE MEMORY TABLE ROLODEX.ADDRESSUSAGE(PERSONID INTEGER,ADDRESSID INTEGER,ADDRESSUSAGETYPE INTEGER,ADDRESSUSAGESTARTDATE DATE,CONSTRAINT ADDRESSUSAGE_PRIMARYKEY PRIMARY KEY(PERSONID,ADDRESSID,ADDRESSUSAGETYPE),CONSTRAINT R0_PERSON_ADDRESSUSAGE FOREIGN KEY(PERSONID) REFERENCES ROLODEX.PERSON(PERSONID) ON DELETE CASCADE,CONSTRAINT R1_ADDRESS_ADDRESSUSAGE FOREIGN KEY(ADDRESSID) REFERENCES ROLODEX.ADDRESS(ADDRESSID) ON DELETE CASCADE)
CREATE MEMORY TABLE SALES_SCHEMA.PRODUCT(PRODUCTID INTEGER,PRODUCTNAME INTEGER,CONSTRAINT PRODUCT_PRIMARYKEY PRIMARY KEY(PRODUCTID))
CREATE MEMORY TABLE SALES_SCHEMA.CUSTOMER(CUSTOMERID INTEGER,CUSTOMENAME VARCHAR(16777216),CONSTRAINT CUSTOMER_PRIMARYKEY PRIMARY KEY(CUSTOMERID))
CREATE MEMORY TABLE SALES_SCHEMA.PRODUCTSALES(CUSTOMERID INTEGER,PRODUCTID INTEGER,QUANTITY DOUBLE,UNITPRICE DOUBLE,SALESDATE DATE,CONSTRAINT PRODUCTSALES_PRIMARYKEY PRIMARY KEY(CUSTOMERID,PRODUCTID),CONSTRAINT R0_PRODUCT_PRODUCTSALES FOREIGN KEY(PRODUCTID) REFERENCES SALES_SCHEMA.PRODUCT(PRODUCTID) ON DELETE CASCADE,CONSTRAINT R1_CUSTOMER_PRODUCTSALES FOREIGN KEY(CUSTOMERID) REFERENCES SALES_SCHEMA.CUSTOMER(CUSTOMERID) ON DELETE CASCADE)
CREATE MEMORY TABLE SALES_DIMENSIONAL_SCHEMA.DAILYSALESFACT(DATEKEY INTEGER,PRODUCTKEY INTEGER,STOREKEY INTEGER,QUANTITYSOLD DOUBLE,DOLLARSALESAMOUNT DOUBLE,CONSTRAINT DAILYSALESFACT_PRIMARYKEY PRIMARY KEY(DATEKEY,PRODUCTKEY,STOREKEY))
CREATE MEMORY TABLE SALES_DIMENSIONAL_SCHEMA.PRODUCTDIMENSION(PRODUCTKEY INTEGER,PRODUCTDESCRIPTION VARCHAR(16777216),CATEGORYDESCRIPTION VARCHAR(16777216),CONSTRAINT PRODUCTDIMENSION_PRIMARYKEY PRIMARY KEY(PRODUCTKEY))
CREATE MEMORY TABLE SALES_DIMENSIONAL_SCHEMA.STOREDIMENSION(STOREKEY INTEGER,STORENUMBER INTEGER,STOREZIP INTEGER,CONSTRAINT STOREDIMENSION_PRIMARYKEY PRIMARY KEY(STOREKEY))
CREATE MEMORY TABLE SALES_DIMENSIONAL_SCHEMA.DATEDIMENSION(DATEKEY INTEGER,THEDATE DATE,THEMONTH INTEGER,THEYEAR INTEGER,CONSTRAINT DATEDIMENSION_PRIMARYKEY PRIMARY KEY(DATEKEY))
CREATE PROCEDURE ROLODEX.PERSON_INSERT(OUT NEWID INTEGER,IN V_PERSONNAME VARCHAR(16777216)) SPECIFIC PERSON_INSERT_10133 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO ROLODEX.PERSON(PERSONID,PERSONNAME)VALUES(DEFAULT,V_PERSONNAME);SET NEWID=IDENTITY();END
CREATE PROCEDURE ROLODEX.PERSON_UPDATE(IN V_PERSONID INTEGER,IN V_PERSONNAME VARCHAR(16777216)) SPECIFIC PERSON_UPDATE_10134 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC UPDATE ROLODEX.PERSON SET PERSONNAME=V_PERSONNAME WHERE PERSONID=V_PERSONID;END
CREATE PROCEDURE ROLODEX.PERSON_DELETE(IN V_PERSONID INTEGER) SPECIFIC PERSON_DELETE_10135 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE FROM ROLODEX.PERSON WHERE PERSONID=V_PERSONID;END
CREATE PROCEDURE ROLODEX.PERSON_MERGE(IN V_PERSONID INTEGER,IN V_PERSONNAME VARCHAR(16777216)) SPECIFIC PERSON_MERGE_10137 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC MERGE INTO ROLODEX.PERSON USING(VALUES(V_PERSONID,V_PERSONNAME))ON(PERSONID=V_PERSONID)WHEN MATCHED THEN UPDATE SET PERSONNAME=V_PERSONNAME WHEN NOT MATCHED THEN INSERT VALUES V_PERSONID,V_PERSONNAME;END
CREATE PROCEDURE ROLODEX.PERSON_SELECT(IN V_PERSONID INTEGER) SPECIFIC PERSON_SELECT_10139 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT PERSONID,PERSONNAME FROM ROLODEX.PERSON WHERE PERSONID=V_PERSONID;OPEN RESULT;END
CREATE PROCEDURE ROLODEX.PERSON_DELETE_ALL() SPECIFIC PERSON_DELETE_ALL_10140 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE FROM ROLODEX.PERSON;END
CREATE PROCEDURE ROLODEX.PERSON_SELECT_ALL() SPECIFIC PERSON_SELECT_ALL_10142 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT PERSONID,PERSONNAME FROM ROLODEX.PERSON;OPEN RESULT;END
CREATE PROCEDURE ROLODEX.ADDRESS_INSERT(OUT NEWID INTEGER,IN V_ADDRESSDETAIL VARCHAR(16777216)) SPECIFIC ADDRESS_INSERT_10145 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO ROLODEX.ADDRESS(ADDRESSID,ADDRESSDETAIL)VALUES(DEFAULT,V_ADDRESSDETAIL);SET NEWID=IDENTITY();END
CREATE PROCEDURE ROLODEX.ADDRESS_UPDATE(IN V_ADDRESSID INTEGER,IN V_ADDRESSDETAIL VARCHAR(16777216)) SPECIFIC ADDRESS_UPDATE_10146 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC UPDATE ROLODEX.ADDRESS SET ADDRESSDETAIL=V_ADDRESSDETAIL WHERE ADDRESSID=V_ADDRESSID;END
CREATE PROCEDURE ROLODEX.ADDRESS_DELETE(IN V_ADDRESSID INTEGER) SPECIFIC ADDRESS_DELETE_10147 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE FROM ROLODEX.ADDRESS WHERE ADDRESSID=V_ADDRESSID;END
CREATE PROCEDURE ROLODEX.ADDRESS_MERGE(IN V_ADDRESSID INTEGER,IN V_ADDRESSDETAIL VARCHAR(16777216)) SPECIFIC ADDRESS_MERGE_10149 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC MERGE INTO ROLODEX.ADDRESS USING(VALUES(V_ADDRESSID,V_ADDRESSDETAIL))ON(ADDRESSID=V_ADDRESSID)WHEN MATCHED THEN UPDATE SET ADDRESSDETAIL=V_ADDRESSDETAIL WHEN NOT MATCHED THEN INSERT VALUES V_ADDRESSID,V_ADDRESSDETAIL;END
CREATE PROCEDURE ROLODEX.ADDRESS_SELECT(IN V_ADDRESSID INTEGER) SPECIFIC ADDRESS_SELECT_10151 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT ADDRESSID,ADDRESSDETAIL FROM ROLODEX.ADDRESS WHERE ADDRESSID=V_ADDRESSID;OPEN RESULT;END
CREATE PROCEDURE ROLODEX.ADDRESS_DELETE_ALL() SPECIFIC ADDRESS_DELETE_ALL_10152 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE FROM ROLODEX.ADDRESS;END
CREATE PROCEDURE ROLODEX.ADDRESS_SELECT_ALL() SPECIFIC ADDRESS_SELECT_ALL_10154 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT ADDRESSID,ADDRESSDETAIL FROM ROLODEX.ADDRESS;OPEN RESULT;END
CREATE PROCEDURE ROLODEX.ADDRESSUSAGE_INSERT(IN V_PERSONID INTEGER,IN V_ADDRESSID INTEGER,IN V_ADDRESSUSAGETYPE INTEGER,IN V_ADDRESSUSAGESTARTDATE DATE) SPECIFIC ADDRESSUSAGE_INSERT_10157 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO ROLODEX.ADDRESSUSAGE(PERSONID,ADDRESSID,ADDRESSUSAGETYPE,ADDRESSUSAGESTARTDATE)VALUES(V_PERSONID,V_ADDRESSID,V_ADDRESSUSAGETYPE,V_ADDRESSUSAGESTARTDATE);END
CREATE PROCEDURE ROLODEX.ADDRESSUSAGE_UPDATE(IN V_PERSONID INTEGER,IN V_ADDRESSID INTEGER,IN V_ADDRESSUSAGETYPE INTEGER,IN V_ADDRESSUSAGESTARTDATE DATE) SPECIFIC ADDRESSUSAGE_UPDATE_10158 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC UPDATE ROLODEX.ADDRESSUSAGE SET ADDRESSUSAGESTARTDATE=V_ADDRESSUSAGESTARTDATE WHERE PERSONID=V_PERSONID AND ADDRESSID=V_ADDRESSID AND ADDRESSUSAGETYPE=V_ADDRESSUSAGETYPE;END
CREATE PROCEDURE ROLODEX.ADDRESSUSAGE_DELETE(IN V_PERSONID INTEGER,IN V_ADDRESSID INTEGER,IN V_ADDRESSUSAGETYPE INTEGER) SPECIFIC ADDRESSUSAGE_DELETE_10159 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE FROM ROLODEX.ADDRESSUSAGE WHERE PERSONID=V_PERSONID AND ADDRESSID=V_ADDRESSID AND ADDRESSUSAGETYPE=V_ADDRESSUSAGETYPE;END
CREATE PROCEDURE ROLODEX.ADDRESSUSAGE_MERGE(IN V_PERSONID INTEGER,IN V_ADDRESSID INTEGER,IN V_ADDRESSUSAGETYPE INTEGER,IN V_ADDRESSUSAGESTARTDATE DATE) SPECIFIC ADDRESSUSAGE_MERGE_10161 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC MERGE INTO ROLODEX.ADDRESSUSAGE USING(VALUES(V_PERSONID,V_ADDRESSID,V_ADDRESSUSAGETYPE,V_ADDRESSUSAGESTARTDATE))ON(PERSONID=V_PERSONID AND ADDRESSID=V_ADDRESSID AND ADDRESSUSAGETYPE=V_ADDRESSUSAGETYPE)WHEN MATCHED THEN UPDATE SET ADDRESSUSAGESTARTDATE=V_ADDRESSUSAGESTARTDATE WHEN NOT MATCHED THEN INSERT VALUES V_PERSONID,V_ADDRESSID,V_ADDRESSUSAGETYPE,V_ADDRESSUSAGESTARTDATE;END
CREATE PROCEDURE ROLODEX.ADDRESSUSAGE_SELECT(IN V_PERSONID INTEGER,IN V_ADDRESSID INTEGER,IN V_ADDRESSUSAGETYPE INTEGER) SPECIFIC ADDRESSUSAGE_SELECT_10163 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT PERSONID,ADDRESSID,ADDRESSUSAGETYPE,ADDRESSUSAGESTARTDATE FROM ROLODEX.ADDRESSUSAGE WHERE PERSONID=V_PERSONID AND ADDRESSID=V_ADDRESSID AND ADDRESSUSAGETYPE=V_ADDRESSUSAGETYPE;OPEN RESULT;END
CREATE PROCEDURE ROLODEX.ADDRESSUSAGE_DELETE_ALL() SPECIFIC ADDRESSUSAGE_DELETE_ALL_10164 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE FROM ROLODEX.ADDRESSUSAGE;END
CREATE PROCEDURE ROLODEX.ADDRESSUSAGE_SELECT_ALL() SPECIFIC ADDRESSUSAGE_SELECT_ALL_10166 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT PERSONID,ADDRESSID,ADDRESSUSAGETYPE,ADDRESSUSAGESTARTDATE FROM ROLODEX.ADDRESSUSAGE;OPEN RESULT;END
CREATE PROCEDURE SALES_SCHEMA.PRODUCT_INSERT(IN V_PRODUCTID INTEGER,IN V_PRODUCTNAME INTEGER) SPECIFIC PRODUCT_INSERT_10142 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO SALES_SCHEMA.PRODUCT(PRODUCTID,PRODUCTNAME)VALUES(V_PRODUCTID,V_PRODUCTNAME);END
CREATE PROCEDURE SALES_SCHEMA.PRODUCT_UPDATE(IN V_PRODUCTID INTEGER,IN V_PRODUCTNAME INTEGER) SPECIFIC PRODUCT_UPDATE_10143 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC UPDATE SALES_SCHEMA.PRODUCT SET PRODUCTNAME=V_PRODUCTNAME WHERE PRODUCTID=V_PRODUCTID;END
CREATE PROCEDURE SALES_SCHEMA.PRODUCT_DELETE(IN V_PRODUCTID INTEGER) SPECIFIC PRODUCT_DELETE_10144 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE FROM SALES_SCHEMA.PRODUCT WHERE PRODUCTID=V_PRODUCTID;END
CREATE PROCEDURE SALES_SCHEMA.PRODUCT_MERGE(IN V_PRODUCTID INTEGER,IN V_PRODUCTNAME INTEGER) SPECIFIC PRODUCT_MERGE_10146 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC MERGE INTO SALES_SCHEMA.PRODUCT USING(VALUES(V_PRODUCTID,V_PRODUCTNAME))ON(PRODUCTID=V_PRODUCTID)WHEN MATCHED THEN UPDATE SET PRODUCTNAME=V_PRODUCTNAME WHEN NOT MATCHED THEN INSERT VALUES V_PRODUCTID,V_PRODUCTNAME;END
CREATE PROCEDURE SALES_SCHEMA.PRODUCT_SELECT(IN V_PRODUCTID INTEGER) SPECIFIC PRODUCT_SELECT_10148 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT PRODUCTID,PRODUCTNAME FROM SALES_SCHEMA.PRODUCT WHERE PRODUCTID=V_PRODUCTID;OPEN RESULT;END
CREATE PROCEDURE SALES_SCHEMA.PRODUCT_DELETE_ALL() SPECIFIC PRODUCT_DELETE_ALL_10149 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE FROM SALES_SCHEMA.PRODUCT;END
CREATE PROCEDURE SALES_SCHEMA.PRODUCT_SELECT_ALL() SPECIFIC PRODUCT_SELECT_ALL_10151 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT PRODUCTID,PRODUCTNAME FROM SALES_SCHEMA.PRODUCT;OPEN RESULT;END
CREATE PROCEDURE SALES_SCHEMA.CUSTOMER_INSERT(IN V_CUSTOMERID INTEGER,IN V_CUSTOMENAME VARCHAR(16777216)) SPECIFIC CUSTOMER_INSERT_10154 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO SALES_SCHEMA.CUSTOMER(CUSTOMERID,CUSTOMENAME)VALUES(V_CUSTOMERID,V_CUSTOMENAME);END
CREATE PROCEDURE SALES_SCHEMA.CUSTOMER_UPDATE(IN V_CUSTOMERID INTEGER,IN V_CUSTOMENAME VARCHAR(16777216)) SPECIFIC CUSTOMER_UPDATE_10155 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC UPDATE SALES_SCHEMA.CUSTOMER SET CUSTOMENAME=V_CUSTOMENAME WHERE CUSTOMERID=V_CUSTOMERID;END
CREATE PROCEDURE SALES_SCHEMA.CUSTOMER_DELETE(IN V_CUSTOMERID INTEGER) SPECIFIC CUSTOMER_DELETE_10156 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE FROM SALES_SCHEMA.CUSTOMER WHERE CUSTOMERID=V_CUSTOMERID;END
CREATE PROCEDURE SALES_SCHEMA.CUSTOMER_MERGE(IN V_CUSTOMERID INTEGER,IN V_CUSTOMENAME VARCHAR(16777216)) SPECIFIC CUSTOMER_MERGE_10158 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC MERGE INTO SALES_SCHEMA.CUSTOMER USING(VALUES(V_CUSTOMERID,V_CUSTOMENAME))ON(CUSTOMERID=V_CUSTOMERID)WHEN MATCHED THEN UPDATE SET CUSTOMENAME=V_CUSTOMENAME WHEN NOT MATCHED THEN INSERT VALUES V_CUSTOMERID,V_CUSTOMENAME;END
CREATE PROCEDURE SALES_SCHEMA.CUSTOMER_SELECT(IN V_CUSTOMERID INTEGER) SPECIFIC CUSTOMER_SELECT_10160 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT CUSTOMERID,CUSTOMENAME FROM SALES_SCHEMA.CUSTOMER WHERE CUSTOMERID=V_CUSTOMERID;OPEN RESULT;END
CREATE PROCEDURE SALES_SCHEMA.CUSTOMER_DELETE_ALL() SPECIFIC CUSTOMER_DELETE_ALL_10161 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE FROM SALES_SCHEMA.CUSTOMER;END
CREATE PROCEDURE SALES_SCHEMA.CUSTOMER_SELECT_ALL() SPECIFIC CUSTOMER_SELECT_ALL_10163 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT CUSTOMERID,CUSTOMENAME FROM SALES_SCHEMA.CUSTOMER;OPEN RESULT;END
CREATE PROCEDURE SALES_SCHEMA.PRODUCTSALES_INSERT(IN V_CUSTOMERID INTEGER,IN V_PRODUCTID INTEGER,IN V_QUANTITY DOUBLE,IN V_UNITPRICE DOUBLE,IN V_SALESDATE DATE) SPECIFIC PRODUCTSALES_INSERT_10166 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO SALES_SCHEMA.PRODUCTSALES(CUSTOMERID,PRODUCTID,QUANTITY,UNITPRICE,SALESDATE)VALUES(V_CUSTOMERID,V_PRODUCTID,V_QUANTITY,V_UNITPRICE,V_SALESDATE);END
CREATE PROCEDURE SALES_SCHEMA.PRODUCTSALES_UPDATE(IN V_CUSTOMERID INTEGER,IN V_PRODUCTID INTEGER,IN V_QUANTITY DOUBLE,IN V_UNITPRICE DOUBLE,IN V_SALESDATE DATE) SPECIFIC PRODUCTSALES_UPDATE_10167 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC UPDATE SALES_SCHEMA.PRODUCTSALES SET QUANTITY=V_QUANTITY,UNITPRICE=V_UNITPRICE,SALESDATE=V_SALESDATE WHERE CUSTOMERID=V_CUSTOMERID AND PRODUCTID=V_PRODUCTID;END
CREATE PROCEDURE SALES_SCHEMA.PRODUCTSALES_DELETE(IN V_CUSTOMERID INTEGER,IN V_PRODUCTID INTEGER) SPECIFIC PRODUCTSALES_DELETE_10168 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE FROM SALES_SCHEMA.PRODUCTSALES WHERE CUSTOMERID=V_CUSTOMERID AND PRODUCTID=V_PRODUCTID;END
CREATE PROCEDURE SALES_SCHEMA.PRODUCTSALES_MERGE(IN V_CUSTOMERID INTEGER,IN V_PRODUCTID INTEGER,IN V_QUANTITY DOUBLE,IN V_UNITPRICE DOUBLE,IN V_SALESDATE DATE) SPECIFIC PRODUCTSALES_MERGE_10170 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC MERGE INTO SALES_SCHEMA.PRODUCTSALES USING(VALUES(V_CUSTOMERID,V_PRODUCTID,V_QUANTITY,V_UNITPRICE,V_SALESDATE))ON(CUSTOMERID=V_CUSTOMERID AND PRODUCTID=V_PRODUCTID)WHEN MATCHED THEN UPDATE SET QUANTITY=V_QUANTITY,UNITPRICE=V_UNITPRICE,SALESDATE=V_SALESDATE WHEN NOT MATCHED THEN INSERT VALUES V_CUSTOMERID,V_PRODUCTID,V_QUANTITY,V_UNITPRICE,V_SALESDATE;END
CREATE PROCEDURE SALES_SCHEMA.PRODUCTSALES_SELECT(IN V_CUSTOMERID INTEGER,IN V_PRODUCTID INTEGER) SPECIFIC PRODUCTSALES_SELECT_10172 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT CUSTOMERID,PRODUCTID,QUANTITY,UNITPRICE,SALESDATE FROM SALES_SCHEMA.PRODUCTSALES WHERE CUSTOMERID=V_CUSTOMERID AND PRODUCTID=V_PRODUCTID;OPEN RESULT;END
CREATE PROCEDURE SALES_SCHEMA.PRODUCTSALES_DELETE_ALL() SPECIFIC PRODUCTSALES_DELETE_ALL_10173 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE FROM SALES_SCHEMA.PRODUCTSALES;END
CREATE PROCEDURE SALES_SCHEMA.PRODUCTSALES_SELECT_ALL() SPECIFIC PRODUCTSALES_SELECT_ALL_10175 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT CUSTOMERID,PRODUCTID,QUANTITY,UNITPRICE,SALESDATE FROM SALES_SCHEMA.PRODUCTSALES;OPEN RESULT;END
CREATE PROCEDURE SALES_DIMENSIONAL_SCHEMA.DAILYSALESFACT_INSERT(IN V_DATEKEY INTEGER,IN V_PRODUCTKEY INTEGER,IN V_STOREKEY INTEGER,IN V_QUANTITYSOLD DOUBLE,IN V_DOLLARSALESAMOUNT DOUBLE) SPECIFIC DAILYSALESFACT_INSERT_10195 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO SALES_DIMENSIONAL_SCHEMA.DAILYSALESFACT(DATEKEY,PRODUCTKEY,STOREKEY,QUANTITYSOLD,DOLLARSALESAMOUNT)VALUES(V_DATEKEY,V_PRODUCTKEY,V_STOREKEY,V_QUANTITYSOLD,V_DOLLARSALESAMOUNT);END
CREATE PROCEDURE SALES_DIMENSIONAL_SCHEMA.DAILYSALESFACT_UPDATE(IN V_DATEKEY INTEGER,IN V_PRODUCTKEY INTEGER,IN V_STOREKEY INTEGER,IN V_QUANTITYSOLD DOUBLE,IN V_DOLLARSALESAMOUNT DOUBLE) SPECIFIC DAILYSALESFACT_UPDATE_10196 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC UPDATE SALES_DIMENSIONAL_SCHEMA.DAILYSALESFACT SET QUANTITYSOLD=V_QUANTITYSOLD,DOLLARSALESAMOUNT=V_DOLLARSALESAMOUNT WHERE DATEKEY=V_DATEKEY AND PRODUCTKEY=V_PRODUCTKEY AND STOREKEY=V_STOREKEY;END
CREATE PROCEDURE SALES_DIMENSIONAL_SCHEMA.DAILYSALESFACT_DELETE(IN V_DATEKEY INTEGER,IN V_PRODUCTKEY INTEGER,IN V_STOREKEY INTEGER) SPECIFIC DAILYSALESFACT_DELETE_10197 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE FROM SALES_DIMENSIONAL_SCHEMA.DAILYSALESFACT WHERE DATEKEY=V_DATEKEY AND PRODUCTKEY=V_PRODUCTKEY AND STOREKEY=V_STOREKEY;END
CREATE PROCEDURE SALES_DIMENSIONAL_SCHEMA.DAILYSALESFACT_MERGE(IN V_DATEKEY INTEGER,IN V_PRODUCTKEY INTEGER,IN V_STOREKEY INTEGER,IN V_QUANTITYSOLD DOUBLE,IN V_DOLLARSALESAMOUNT DOUBLE) SPECIFIC DAILYSALESFACT_MERGE_10199 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC MERGE INTO SALES_DIMENSIONAL_SCHEMA.DAILYSALESFACT USING(VALUES(V_DATEKEY,V_PRODUCTKEY,V_STOREKEY,V_QUANTITYSOLD,V_DOLLARSALESAMOUNT))ON(DATEKEY=V_DATEKEY AND PRODUCTKEY=V_PRODUCTKEY AND STOREKEY=V_STOREKEY)WHEN MATCHED THEN UPDATE SET QUANTITYSOLD=V_QUANTITYSOLD,DOLLARSALESAMOUNT=V_DOLLARSALESAMOUNT WHEN NOT MATCHED THEN INSERT VALUES V_DATEKEY,V_PRODUCTKEY,V_STOREKEY,V_QUANTITYSOLD,V_DOLLARSALESAMOUNT;END
CREATE PROCEDURE SALES_DIMENSIONAL_SCHEMA.DAILYSALESFACT_SELECT(IN V_DATEKEY INTEGER,IN V_PRODUCTKEY INTEGER,IN V_STOREKEY INTEGER) SPECIFIC DAILYSALESFACT_SELECT_10201 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT DATEKEY,PRODUCTKEY,STOREKEY,QUANTITYSOLD,DOLLARSALESAMOUNT FROM SALES_DIMENSIONAL_SCHEMA.DAILYSALESFACT WHERE DATEKEY=V_DATEKEY AND PRODUCTKEY=V_PRODUCTKEY AND STOREKEY=V_STOREKEY;OPEN RESULT;END
CREATE PROCEDURE SALES_DIMENSIONAL_SCHEMA.DAILYSALESFACT_DELETE_ALL() SPECIFIC DAILYSALESFACT_DELETE_ALL_10202 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE FROM SALES_DIMENSIONAL_SCHEMA.DAILYSALESFACT;END
CREATE PROCEDURE SALES_DIMENSIONAL_SCHEMA.DAILYSALESFACT_SELECT_ALL() SPECIFIC DAILYSALESFACT_SELECT_ALL_10204 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT DATEKEY,PRODUCTKEY,STOREKEY,QUANTITYSOLD,DOLLARSALESAMOUNT FROM SALES_DIMENSIONAL_SCHEMA.DAILYSALESFACT;OPEN RESULT;END
CREATE PROCEDURE SALES_DIMENSIONAL_SCHEMA.PRODUCTDIMENSION_INSERT(IN V_PRODUCTKEY INTEGER,IN V_PRODUCTDESCRIPTION VARCHAR(16777216),IN V_CATEGORYDESCRIPTION VARCHAR(16777216)) SPECIFIC PRODUCTDIMENSION_INSERT_10207 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO SALES_DIMENSIONAL_SCHEMA.PRODUCTDIMENSION(PRODUCTKEY,PRODUCTDESCRIPTION,CATEGORYDESCRIPTION)VALUES(V_PRODUCTKEY,V_PRODUCTDESCRIPTION,V_CATEGORYDESCRIPTION);END
CREATE PROCEDURE SALES_DIMENSIONAL_SCHEMA.PRODUCTDIMENSION_UPDATE(IN V_PRODUCTKEY INTEGER,IN V_PRODUCTDESCRIPTION VARCHAR(16777216),IN V_CATEGORYDESCRIPTION VARCHAR(16777216)) SPECIFIC PRODUCTDIMENSION_UPDATE_10208 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC UPDATE SALES_DIMENSIONAL_SCHEMA.PRODUCTDIMENSION SET PRODUCTDESCRIPTION=V_PRODUCTDESCRIPTION,CATEGORYDESCRIPTION=V_CATEGORYDESCRIPTION WHERE PRODUCTKEY=V_PRODUCTKEY;END
CREATE PROCEDURE SALES_DIMENSIONAL_SCHEMA.PRODUCTDIMENSION_DELETE(IN V_PRODUCTKEY INTEGER) SPECIFIC PRODUCTDIMENSION_DELETE_10209 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE FROM SALES_DIMENSIONAL_SCHEMA.PRODUCTDIMENSION WHERE PRODUCTKEY=V_PRODUCTKEY;END
CREATE PROCEDURE SALES_DIMENSIONAL_SCHEMA.PRODUCTDIMENSION_MERGE(IN V_PRODUCTKEY INTEGER,IN V_PRODUCTDESCRIPTION VARCHAR(16777216),IN V_CATEGORYDESCRIPTION VARCHAR(16777216)) SPECIFIC PRODUCTDIMENSION_MERGE_10211 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC MERGE INTO SALES_DIMENSIONAL_SCHEMA.PRODUCTDIMENSION USING(VALUES(V_PRODUCTKEY,V_PRODUCTDESCRIPTION,V_CATEGORYDESCRIPTION))ON(PRODUCTKEY=V_PRODUCTKEY)WHEN MATCHED THEN UPDATE SET PRODUCTDESCRIPTION=V_PRODUCTDESCRIPTION,CATEGORYDESCRIPTION=V_CATEGORYDESCRIPTION WHEN NOT MATCHED THEN INSERT VALUES V_PRODUCTKEY,V_PRODUCTDESCRIPTION,V_CATEGORYDESCRIPTION;END
CREATE PROCEDURE SALES_DIMENSIONAL_SCHEMA.PRODUCTDIMENSION_SELECT(IN V_PRODUCTKEY INTEGER) SPECIFIC PRODUCTDIMENSION_SELECT_10213 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT PRODUCTKEY,PRODUCTDESCRIPTION,CATEGORYDESCRIPTION FROM SALES_DIMENSIONAL_SCHEMA.PRODUCTDIMENSION WHERE PRODUCTKEY=V_PRODUCTKEY;OPEN RESULT;END
CREATE PROCEDURE SALES_DIMENSIONAL_SCHEMA.PRODUCTDIMENSION_DELETE_ALL() SPECIFIC PRODUCTDIMENSION_DELETE_ALL_10214 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE FROM SALES_DIMENSIONAL_SCHEMA.PRODUCTDIMENSION;END
CREATE PROCEDURE SALES_DIMENSIONAL_SCHEMA.PRODUCTDIMENSION_SELECT_ALL() SPECIFIC PRODUCTDIMENSION_SELECT_ALL_10216 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT PRODUCTKEY,PRODUCTDESCRIPTION,CATEGORYDESCRIPTION FROM SALES_DIMENSIONAL_SCHEMA.PRODUCTDIMENSION;OPEN RESULT;END
CREATE PROCEDURE SALES_DIMENSIONAL_SCHEMA.STOREDIMENSION_INSERT(IN V_STOREKEY INTEGER,IN V_STORENUMBER INTEGER,IN V_STOREZIP INTEGER) SPECIFIC STOREDIMENSION_INSERT_10219 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO SALES_DIMENSIONAL_SCHEMA.STOREDIMENSION(STOREKEY,STORENUMBER,STOREZIP)VALUES(V_STOREKEY,V_STORENUMBER,V_STOREZIP);END
CREATE PROCEDURE SALES_DIMENSIONAL_SCHEMA.STOREDIMENSION_UPDATE(IN V_STOREKEY INTEGER,IN V_STORENUMBER INTEGER,IN V_STOREZIP INTEGER) SPECIFIC STOREDIMENSION_UPDATE_10220 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC UPDATE SALES_DIMENSIONAL_SCHEMA.STOREDIMENSION SET STORENUMBER=V_STORENUMBER,STOREZIP=V_STOREZIP WHERE STOREKEY=V_STOREKEY;END
CREATE PROCEDURE SALES_DIMENSIONAL_SCHEMA.STOREDIMENSION_DELETE(IN V_STOREKEY INTEGER) SPECIFIC STOREDIMENSION_DELETE_10221 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE FROM SALES_DIMENSIONAL_SCHEMA.STOREDIMENSION WHERE STOREKEY=V_STOREKEY;END
CREATE PROCEDURE SALES_DIMENSIONAL_SCHEMA.STOREDIMENSION_MERGE(IN V_STOREKEY INTEGER,IN V_STORENUMBER INTEGER,IN V_STOREZIP INTEGER) SPECIFIC STOREDIMENSION_MERGE_10223 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC MERGE INTO SALES_DIMENSIONAL_SCHEMA.STOREDIMENSION USING(VALUES(V_STOREKEY,V_STORENUMBER,V_STOREZIP))ON(STOREKEY=V_STOREKEY)WHEN MATCHED THEN UPDATE SET STORENUMBER=V_STORENUMBER,STOREZIP=V_STOREZIP WHEN NOT MATCHED THEN INSERT VALUES V_STOREKEY,V_STORENUMBER,V_STOREZIP;END
CREATE PROCEDURE SALES_DIMENSIONAL_SCHEMA.STOREDIMENSION_SELECT(IN V_STOREKEY INTEGER) SPECIFIC STOREDIMENSION_SELECT_10225 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT STOREKEY,STORENUMBER,STOREZIP FROM SALES_DIMENSIONAL_SCHEMA.STOREDIMENSION WHERE STOREKEY=V_STOREKEY;OPEN RESULT;END
CREATE PROCEDURE SALES_DIMENSIONAL_SCHEMA.STOREDIMENSION_DELETE_ALL() SPECIFIC STOREDIMENSION_DELETE_ALL_10226 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE FROM SALES_DIMENSIONAL_SCHEMA.STOREDIMENSION;END
CREATE PROCEDURE SALES_DIMENSIONAL_SCHEMA.STOREDIMENSION_SELECT_ALL() SPECIFIC STOREDIMENSION_SELECT_ALL_10228 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT STOREKEY,STORENUMBER,STOREZIP FROM SALES_DIMENSIONAL_SCHEMA.STOREDIMENSION;OPEN RESULT;END
CREATE PROCEDURE SALES_DIMENSIONAL_SCHEMA.DATEDIMENSION_INSERT(IN V_DATEKEY INTEGER,IN V_THEDATE DATE,IN V_THEMONTH INTEGER,IN V_THEYEAR INTEGER) SPECIFIC DATEDIMENSION_INSERT_10231 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO SALES_DIMENSIONAL_SCHEMA.DATEDIMENSION(DATEKEY,THEDATE,THEMONTH,THEYEAR)VALUES(V_DATEKEY,V_THEDATE,V_THEMONTH,V_THEYEAR);END
CREATE PROCEDURE SALES_DIMENSIONAL_SCHEMA.DATEDIMENSION_UPDATE(IN V_DATEKEY INTEGER,IN V_THEDATE DATE,IN V_THEMONTH INTEGER,IN V_THEYEAR INTEGER) SPECIFIC DATEDIMENSION_UPDATE_10232 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC UPDATE SALES_DIMENSIONAL_SCHEMA.DATEDIMENSION SET THEDATE=V_THEDATE,THEMONTH=V_THEMONTH,THEYEAR=V_THEYEAR WHERE DATEKEY=V_DATEKEY;END
CREATE PROCEDURE SALES_DIMENSIONAL_SCHEMA.DATEDIMENSION_DELETE(IN V_DATEKEY INTEGER) SPECIFIC DATEDIMENSION_DELETE_10233 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE FROM SALES_DIMENSIONAL_SCHEMA.DATEDIMENSION WHERE DATEKEY=V_DATEKEY;END
CREATE PROCEDURE SALES_DIMENSIONAL_SCHEMA.DATEDIMENSION_MERGE(IN V_DATEKEY INTEGER,IN V_THEDATE DATE,IN V_THEMONTH INTEGER,IN V_THEYEAR INTEGER) SPECIFIC DATEDIMENSION_MERGE_10235 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC MERGE INTO SALES_DIMENSIONAL_SCHEMA.DATEDIMENSION USING(VALUES(V_DATEKEY,V_THEDATE,V_THEMONTH,V_THEYEAR))ON(DATEKEY=V_DATEKEY)WHEN MATCHED THEN UPDATE SET THEDATE=V_THEDATE,THEMONTH=V_THEMONTH,THEYEAR=V_THEYEAR WHEN NOT MATCHED THEN INSERT VALUES V_DATEKEY,V_THEDATE,V_THEMONTH,V_THEYEAR;END
CREATE PROCEDURE SALES_DIMENSIONAL_SCHEMA.DATEDIMENSION_SELECT(IN V_DATEKEY INTEGER) SPECIFIC DATEDIMENSION_SELECT_10237 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT DATEKEY,THEDATE,THEMONTH,THEYEAR FROM SALES_DIMENSIONAL_SCHEMA.DATEDIMENSION WHERE DATEKEY=V_DATEKEY;OPEN RESULT;END
CREATE PROCEDURE SALES_DIMENSIONAL_SCHEMA.DATEDIMENSION_DELETE_ALL() SPECIFIC DATEDIMENSION_DELETE_ALL_10238 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE FROM SALES_DIMENSIONAL_SCHEMA.DATEDIMENSION;END
CREATE PROCEDURE SALES_DIMENSIONAL_SCHEMA.DATEDIMENSION_SELECT_ALL() SPECIFIC DATEDIMENSION_SELECT_ALL_10240 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT DATEKEY,THEDATE,THEMONTH,THEYEAR FROM SALES_DIMENSIONAL_SCHEMA.DATEDIMENSION;OPEN RESULT;END
CREATE FUNCTION ROLODEX.PERSON_COUNT() RETURNS INTEGER SPECIFIC PERSON_COUNT_10144 LANGUAGE SQL NOT DETERMINISTIC READS SQL DATA CALLED ON NULL INPUT BEGIN ATOMIC DECLARE V_COUNT INTEGER;SELECT COUNT(*)INTO V_COUNT FROM ROLODEX.PERSON;RETURN V_COUNT;END
CREATE FUNCTION ROLODEX.ADDRESS_COUNT() RETURNS INTEGER SPECIFIC ADDRESS_COUNT_10156 LANGUAGE SQL NOT DETERMINISTIC READS SQL DATA CALLED ON NULL INPUT BEGIN ATOMIC DECLARE V_COUNT INTEGER;SELECT COUNT(*)INTO V_COUNT FROM ROLODEX.ADDRESS;RETURN V_COUNT;END
CREATE FUNCTION ROLODEX.ADDRESSUSAGE_COUNT() RETURNS INTEGER SPECIFIC ADDRESSUSAGE_COUNT_10168 LANGUAGE SQL NOT DETERMINISTIC READS SQL DATA CALLED ON NULL INPUT BEGIN ATOMIC DECLARE V_COUNT INTEGER;SELECT COUNT(*)INTO V_COUNT FROM ROLODEX.ADDRESSUSAGE;RETURN V_COUNT;END
CREATE FUNCTION SALES_SCHEMA.PRODUCT_COUNT() RETURNS INTEGER SPECIFIC PRODUCT_COUNT_10153 LANGUAGE SQL NOT DETERMINISTIC READS SQL DATA CALLED ON NULL INPUT BEGIN ATOMIC DECLARE V_COUNT INTEGER;SELECT COUNT(*)INTO V_COUNT FROM SALES_SCHEMA.PRODUCT;RETURN V_COUNT;END
CREATE FUNCTION SALES_SCHEMA.CUSTOMER_COUNT() RETURNS INTEGER SPECIFIC CUSTOMER_COUNT_10165 LANGUAGE SQL NOT DETERMINISTIC READS SQL DATA CALLED ON NULL INPUT BEGIN ATOMIC DECLARE V_COUNT INTEGER;SELECT COUNT(*)INTO V_COUNT FROM SALES_SCHEMA.CUSTOMER;RETURN V_COUNT;END
CREATE FUNCTION SALES_SCHEMA.PRODUCTSALES_COUNT() RETURNS INTEGER SPECIFIC PRODUCTSALES_COUNT_10177 LANGUAGE SQL NOT DETERMINISTIC READS SQL DATA CALLED ON NULL INPUT BEGIN ATOMIC DECLARE V_COUNT INTEGER;SELECT COUNT(*)INTO V_COUNT FROM SALES_SCHEMA.PRODUCTSALES;RETURN V_COUNT;END
CREATE FUNCTION SALES_DIMENSIONAL_SCHEMA.DAILYSALESFACT_COUNT() RETURNS INTEGER SPECIFIC DAILYSALESFACT_COUNT_10206 LANGUAGE SQL NOT DETERMINISTIC READS SQL DATA CALLED ON NULL INPUT BEGIN ATOMIC DECLARE V_COUNT INTEGER;SELECT COUNT(*)INTO V_COUNT FROM SALES_DIMENSIONAL_SCHEMA.DAILYSALESFACT;RETURN V_COUNT;END
CREATE FUNCTION SALES_DIMENSIONAL_SCHEMA.PRODUCTDIMENSION_COUNT() RETURNS INTEGER SPECIFIC PRODUCTDIMENSION_COUNT_10218 LANGUAGE SQL NOT DETERMINISTIC READS SQL DATA CALLED ON NULL INPUT BEGIN ATOMIC DECLARE V_COUNT INTEGER;SELECT COUNT(*)INTO V_COUNT FROM SALES_DIMENSIONAL_SCHEMA.PRODUCTDIMENSION;RETURN V_COUNT;END
CREATE FUNCTION SALES_DIMENSIONAL_SCHEMA.STOREDIMENSION_COUNT() RETURNS INTEGER SPECIFIC STOREDIMENSION_COUNT_10230 LANGUAGE SQL NOT DETERMINISTIC READS SQL DATA CALLED ON NULL INPUT BEGIN ATOMIC DECLARE V_COUNT INTEGER;SELECT COUNT(*)INTO V_COUNT FROM SALES_DIMENSIONAL_SCHEMA.STOREDIMENSION;RETURN V_COUNT;END
CREATE FUNCTION SALES_DIMENSIONAL_SCHEMA.DATEDIMENSION_COUNT() RETURNS INTEGER SPECIFIC DATEDIMENSION_COUNT_10242 LANGUAGE SQL NOT DETERMINISTIC READS SQL DATA CALLED ON NULL INPUT BEGIN ATOMIC DECLARE V_COUNT INTEGER;SELECT COUNT(*)INTO V_COUNT FROM SALES_DIMENSIONAL_SCHEMA.DATEDIMENSION;RETURN V_COUNT;END
ALTER TABLE SALES_DIMENSIONAL_SCHEMA.DAILYSALESFACT ADD CONSTRAINT R0_PRODUCTDIMENSION_DAILYSALESFACT FOREIGN KEY(PRODUCTKEY) REFERENCES SALES_DIMENSIONAL_SCHEMA.PRODUCTDIMENSION(PRODUCTKEY) ON DELETE CASCADE
ALTER TABLE SALES_DIMENSIONAL_SCHEMA.DAILYSALESFACT ADD CONSTRAINT R1_STOREDIMENSION_DAILYSALESFACT FOREIGN KEY(STOREKEY) REFERENCES SALES_DIMENSIONAL_SCHEMA.STOREDIMENSION(STOREKEY) ON DELETE CASCADE
ALTER TABLE SALES_DIMENSIONAL_SCHEMA.DAILYSALESFACT ADD CONSTRAINT R2_DATEDIMENSION_DAILYSALESFACT FOREIGN KEY(DATEKEY) REFERENCES SALES_DIMENSIONAL_SCHEMA.DATEDIMENSION(DATEKEY) ON DELETE CASCADE
ALTER SEQUENCE SYSTEM_LOBS.LOB_ID RESTART WITH 1
SET DATABASE DEFAULT INITIAL SCHEMA PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.SQL_IDENTIFIER TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.YES_OR_NO TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.TIME_STAMP TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.CARDINAL_NUMBER TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.CHARACTER_DATA TO PUBLIC
GRANT DBA TO SA
SET SCHEMA SYSTEM_LOBS
INSERT INTO BLOCKS VALUES(0,2147483647,0)
